package bot_router

import (
	"fmt"
	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	main_handlers "github.com/vigdim/vab_bot/handlers/bot"
	admin_handlers "github.com/vigdim/vab_bot/handlers/bot/admin"
	user_handlers "github.com/vigdim/vab_bot/handlers/bot/user"
	"os"
)

func Init() {
	botToken := os.Getenv("TOKEN")

	// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°—Ä–µ–¥—Å—Ç–≤–æ –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–∂–µ—Ç —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
	// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
	debugMode := os.Getenv("DEBUG_MODE")
	printErrors := os.Getenv("PRINT_ERRORS")
	var BotOption = telego.WithDefaultLogger(debugMode == "Develop", printErrors == "Yes")

	bot, err := telego.NewBot(botToken, BotOption)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	// Get updates channel
	updates, _ := bot.UpdatesViaLongPolling(nil)

	// Create bot handler and specify from where to get updates
	bh, _ := th.NewBotHandler(bot, updates)

	// Stop handling updates
	defer bh.Stop()

	// Stop getting updates
	defer bot.StopLongPolling()

	// START HANDLERS BLOCK ///////////////////////////////////////////////////////////////////////
	// user handlers message ==============================================================
	// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ö–∞—Ç–∞–ª–æ–≥
	bh.Handle(user_handlers.CatalogMess, th.TextEqual("üìÅ –ö–∞—Ç–∞–ª–æ–≥"))
	// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –û –∫–æ–º–ø–∞–Ω–∏–∏
	bh.Handle(user_handlers.AboutMess, th.TextEqual("¬©Ô∏è–û –∫–æ–º–ø–∞–Ω–∏–∏"))
	// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ö–∞—Ç–∞–ª–æ–≥
	bh.Handle(user_handlers.MainMenuMess, th.TextEqual("üîô –í –ù–ê–ß–ê–õ–û"))
	// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ö–∞–±–∏–Ω–µ—Ç
	bh.Handle(user_handlers.CabinetMess, th.TextEqual("üë§ –ö–∞–±–∏–Ω–µ—Ç"))
	// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ê–∫–∫–∞—É–Ω—Ç
	bh.Handle(user_handlers.AccountMess, th.TextEqual("üë§ –ê–∫–∫–∞—É–Ω—Ç"))
	// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
	bh.Handle(user_handlers.ConsultationMess, th.TextEqual("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"))
	// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ö—É–ø–∏—Ç—å –û–§–î (–≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –û–§–î)
	bh.Handle(user_handlers.ListOfd, th.TextEqual("üíµ –ö—É–ø–∏—Ç—å –û–§–î"))
	// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ó–∞–∫–∞–∑—ã (–≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –û–§–î –∫–æ–¥–æ–≤)
	bh.Handle(user_handlers.OrdersMess, th.TextEqual("üßæ –ó–∞–∫–∞–∑—ã"))

	// user handlers CallbackQuery =======================================================
	// cback_–û–§–î
	bh.HandleCallbackQuery(user_handlers.GetOneOfdCb /*th.AnyCallbackQueryWithMessage(),*/, th.CallbackDataPrefix("cb_OFD_"))
	// cback –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
	bh.HandleCallbackQuery(user_handlers.ConsultationCb /*th.AnyCallbackQueryWithMessage(),*/, th.CallbackDataPrefix("cb_cons_"))

	// admin handlers message ==============================================================
	// –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ö–∞—Ç–∞–ª–æ–≥
	bh.Handle(admin_handlers.MainUserMenuMess, th.TextEqual("üë®‚Äçüíº–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))

	// main_handlers ==============================================================================
	bh.Handle(main_handlers.Start, th.CommandEqual("start"))    //–í—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
	bh.Handle(main_handlers.SendMyData, th.TextEqual("telega")) //–í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	// Start handling updates
	bh.Start()
}
